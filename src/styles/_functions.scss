@use "sass:math";
// Fluid Size Function
// helper function, that strips units (12px => 12)
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

@function is-string($variable) {
  @if type-of($variable) != 'string' {
    @return false;
  }

  @return true;
}

// Function that takes just breakpoint name like: xxl or "xxl"
// and return's value of this breakpoint in pixels
@function get-breakpoint-value($bp-value) {
  @return map-get($breakpoints, $bp-value);
}

// Taking pixel value or breakpoint name
// and returning pixel value
@function parseBreakpoint($value) {
  @return if(is-string($value), get-breakpoint-value($value), $value);
}

// fluid property
// helper function, that calculates fluid size
// $f-min - min font size
// $f-max - max font size
// $w-min - min window width
// $w-max - max window width
// $units - measure units (e.x. px, em, rem, vw)
@function calcFluidSize($f-min, $f-max, $w-min, $w-max, $units: px) {
  @if is-string($w-max) {
    $w-max: unquote($w-max);
  }

  @if is-string($w-min) {
    $w-min: unquote($w-min);
  }

  $f-min: strip-unit($f-min);
  $f-max: strip-unit($f-max);
  $w-min: strip-unit($w-min);
  $w-max: strip-unit($w-max);

  $k: math.div(($f-max - $f-min), ($w-max - $w-min));
  $b: $f-min - $k * $w-min;

  $b: $b + $units;

  @return calc(#{$k} * 100vw + #{$b});
}
